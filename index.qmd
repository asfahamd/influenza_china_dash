---
title: "Influenza A H7N9 in China, 2013"
format: dashboard
    #embed-resources: true --> this code here allows for sharing code w/o files folder
theme: lux
---

```{r}
# Load packages 
if(!require(pacman)) install.packages("pacman")
library(pacman)
pacman::p_load(tidyverse, outbreaks, bslib, bsicons, shiny, 
               rgeoboundaries, plotly, htmltools, reactable)

# view data
#head(outbreaks::fluH7N9_china_2013)
```

```{r}
# # Setup data for use in dashboard
influenza_china <- outbreaks::fluH7N9_china_2013 


# **Total Number of Cases**: Count all the rows in the dataset.
  total_cases_influenza <- influenza_china %>% 
  select(case_id) %>% 
  mutate(case_id = as.factor(case_id)) %>% 
  summarise(total_unique_ids = n_distinct(case_id))
  
  
# **Total Hospitalizations**: Count the number of hospitalizations. You can `filter(!is.na(date_of_hospitalisation))` to get this.
  
  total_hospitalisations <- influenza_china %>% 
    select(case_id, date_of_hospitalisation) %>% 
    filter(!is.na(date_of_hospitalisation)) %>% 
    summarise(total_hospitilisation = n_distinct(case_id))
  
  
  # **Total Deaths**: Count the number of deaths. Consider the outcome variable for this.
  
  total_deaths_influenza <- influenza_china %>% 
    select(case_id, outcome) %>% 
    filter(outcome == "Death") %>% 
    summarise(total_deaths = n_distinct(case_id))
  
```


```{r}
# <!-- ### Step 3: Plot of Case Counts -->
# 
# <!-- - Create a bar chart as seen in  using `ggplot2` to show the number of cases per province. Your plot should resemble the one in the `target_final_output.html` file. Add this to a section in your dashboard. -->

cases_by_province <- influenza_china %>% 
  group_by(province) %>% 
  summarise(num_cases_province = n_distinct(case_id)) %>% 
  arrange(desc(num_cases_province)) %>% 
  mutate(tooltip_label = paste(province, 
                               num_cases_province, 
                               sep = ": ")) %>% 
  ggplot(aes(y = reorder(province, num_cases_province),
             x = num_cases_province, 
             text = tooltip_label)) + 
  geom_col(fill = "#3f71ab") + 
  labs(x = "Number of Cases",
       y = NULL) + 
  theme_classic()+
  theme(legend.position = "none")

cases_by_province_ggplotly <- 
  ggplotly(cases_by_province, tooltip = "text")
```

```{r results='hide', message=FALSE, warning = FALSE}
pacman::p_load(outbreaks, rgeoboundaries, plotly)

### MAP OF CASES PER PROVINCE
province_summary <- fluH7N9_china_2013 %>% 
  group_by(province) %>% 
  summarise(total_cases = n()) 

china_map <- rgeoboundaries::gb_adm1("china")

# Check the keys to see if join will be successful
setdiff(province_summary$province, china_map$shapeName)
setdiff(china_map$shapeName, province_summary$province)
# Some work to be done to harmonize these

china_map <- china_map %>%
  # Remove the strings Province, Municipality and Autonomous Region 
  # to allow matching
  mutate(province = str_trim(
    str_remove(shapeName, "Province|Municipality|Autonomous Region")
  ))

# Check if join will work fine
setdiff(province_summary$province, china_map$province)

# Fix Guangdong, which based on a quick Google is actually Guangzhou
china_map <- china_map %>% 
  mutate(province = if_else(province == "Guangzhou", "Guangdong", province)) 
  
# Check again
setdiff(province_summary$province, china_map$province)

# Now join
china_map_joined <- 
  left_join(china_map, province_summary, by = "province") %>% 
  # Create tooltip label 
  mutate(tooltip_label = paste0(province, ": ", total_cases))

china_map_plot <- ggplot(china_map_joined) +
  geom_sf(aes(fill = total_cases, text = tooltip_label)) + 
  theme_void() +
  labs(fill = "Number of Cases") + 
  theme(legend.position = "none")

china_map_plot_ggplotly <- 
  ggplotly(china_map_plot, tooltip = "text")
```


# HOME

## Row 1 {height="20%"}

```{r}
value_box(
  title = "Total Cases",
  value = total_cases_influenza,
  showcase = bsicons::bs_icon("virus"),
  theme = value_box_theme(bg = "#518fd6"))
```


```{r}
value_box(
  title = "Total Hospitalizations",
  value = total_hospitalisations,
  showcase = bsicons::bs_icon("hospital"),
  theme = value_box_theme(bg = "#214773"))
```

```{r}
value_box(
  title = "Total Deaths",
  value = total_deaths_influenza,
  showcase = bsicons::bs_icon("file-medical"),
  theme = value_box_theme(bg = "#3f71ab")
)
```


## Row 2 {height="80%"}

###  {width="30%"}

```{r title = "Number of Cases by Province"}
cases_by_province_ggplotly
```



###  {width="70%"}

```{r}
china_map_plot_ggplotly
```



# DOWNLOAD DATA


```{r message=FALSE}
# ### Step 5: Download Data Page
# 
# - Implement a data download section using `reactable` for an interactive table and a download button. You can modify and use the code below, which implements a similar table for the `gapminder` dataset.
# Load packages 
if(!require(pacman)) install.packages("pacman")
pacman::p_load(htmltools, reactable, gapminder)

htmltools::browsable(
  tagList(
    reactable(influenza_china, 
              elementId = "influenza-table", 
              searchable = T, 
              filterable = T), 
    
tags$button("Download as CSV", 
            onclick = "Reactable.downloadDataCSV('influenza-table')")
  )
)
```

